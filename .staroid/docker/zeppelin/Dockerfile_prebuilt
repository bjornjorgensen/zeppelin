FROM apache/zeppelin:0.9.0 AS builder

ENV Z_VERSION="0.9.0-preview1" \
    Z_HOME="/zeppelin"

# extract war package into container image.
# Otherwise, war package is extracted on startup and that takes lots of time
# while underlying disk io is not too fast with gvisor (sandboxed).
RUN cd $Z_HOME && \
    mkdir -p zeppelin-web/dist && mkdir -p zeppelin-web-angular/dist && \
    cd zeppelin-web/dist && jar xf ../../zeppelin-web-$Z_VERSION.war && rm -f ../../zeppelin-web-$Z_VERSION.war && \
    cd ../../zeppelin-web-angular/dist && jar xf ../../zeppelin-web-angular-$Z_VERSION.war && rm -f ../../zeppelin-web-angular-$Z_VERSION.war && \
    cd ../..

# container image
FROM ubuntu:18.04

RUN apt-get -y update && \
    apt-get install -y curl openjdk-8-jre-headless && \
    apt-get clean

ADD https://storage.googleapis.com/kubernetes-release/release/v1.16.3/bin/linux/amd64/kubectl /usr/bin/kubectl
RUN chmod +rx /usr/bin/kubectl

ARG ZEPPELIN_USER_ID=2100
ARG ZEPPELIN_GROUP_ID=2100

ENV Z_VERSION="0.9.0-SNAPSHOT"

ENV LOG_TAG="[ZEPPELIN_${Z_VERSION}]:" \
    Z_HOME="/zeppelin" \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8 \
    ZEPPELIN_ADDR="0.0.0.0"

RUN groupadd --gid $ZEPPELIN_GROUP_ID zeppelin \
    && useradd -ms /bin/bash -d ${Z_HOME} zeppelin --uid $ZEPPELIN_USER_ID --gid $ZEPPELIN_GROUP_ID
USER 2100

COPY --chown=zeppelin:zeppelin --from=builder /zeppelin /zeppelin/
COPY --chown=zeppelin:zeppelin ./.staroid/conf/log4j.properties /zeppelin/conf/log4j.properties
COPY --chown=zeppelin:zeppelin ./.staroid/k8s/100-interpreter-spec.yaml /zeppelin/k8s/interpreter/100-interpreter-spec.yaml

# create symlink to helium dependencies package (zeppelin-spell, zeppelin-tabledata, zeppelin-vis)
# Reason doing this is, if zeppelin-web is configured from dir, instead of war, it looking for src dir instead of lib dir for this dependency.
# However we don't really ship source code here.
RUN mkdir -p /zeppelin/zeppelin-web/src/app && \
    ln -s /zeppelin/lib/node_modules/zeppelin-tabledata /zeppelin/zeppelin-web/src/app/tabledata && \
    ln -s /zeppelin/lib/node_modules/zeppelin-vis /zeppelin/zeppelin-web/src/app/visualization && \
    ln -s /zeppelin/lib/node_modules/zeppelin-spell /zeppelin/zeppelin-web/src/app/spell

RUN rm -rf /zeppelin/notebook
COPY --chown=zeppelin:zeppelin ./.staroid/notebook /zeppelin/notebook

EXPOSE 8080

WORKDIR ${Z_HOME}
CMD ["sh", "/zeppelin/bin/zeppelin.sh"]
